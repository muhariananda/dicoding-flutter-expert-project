// Mocks generated by Mockito 5.3.2 from annotations
// in ditonton/test/feature/movie_detail/page/movie_detail_page_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i9;

import 'package:bloc/bloc.dart' as _i10;
import 'package:ditonton/core/movie/domain/usecase/get_movie_detail.dart'
    as _i2;
import 'package:ditonton/core/movie/domain/usecase/get_movie_recommendations.dart'
    as _i7;
import 'package:ditonton/core/movie/domain/usecase/get_watchlist_status.dart'
    as _i3;
import 'package:ditonton/core/movie/domain/usecase/remove_watchlist.dart'
    as _i5;
import 'package:ditonton/core/movie/domain/usecase/save_watchlist.dart' as _i4;
import 'package:ditonton/feature/movie_detail/bloc/movie_detail_bloc.dart'
    as _i6;
import 'package:ditonton/feature/movie_detail/cubit/movie_recommendations_cubit.dart'
    as _i8;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeGetMovieDetail_0 extends _i1.SmartFake
    implements _i2.GetMovieDetail {
  _FakeGetMovieDetail_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeGetWatchListStatus_1 extends _i1.SmartFake
    implements _i3.GetWatchListStatus {
  _FakeGetWatchListStatus_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeSaveWatchlist_2 extends _i1.SmartFake implements _i4.SaveWatchlist {
  _FakeSaveWatchlist_2(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeRemoveWatchlist_3 extends _i1.SmartFake
    implements _i5.RemoveWatchlist {
  _FakeRemoveWatchlist_3(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeMovieDetailState_4 extends _i1.SmartFake
    implements _i6.MovieDetailState {
  _FakeMovieDetailState_4(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeGetMovieRecommendations_5 extends _i1.SmartFake
    implements _i7.GetMovieRecommendations {
  _FakeGetMovieRecommendations_5(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeMovieRecommendationsState_6 extends _i1.SmartFake
    implements _i8.MovieRecommendationsState {
  _FakeMovieRecommendationsState_6(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [MovieDetailBloc].
///
/// See the documentation for Mockito's code generation for more information.
class MockMovieDetailBloc extends _i1.Mock implements _i6.MovieDetailBloc {
  MockMovieDetailBloc() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.GetMovieDetail get getMovieDetail => (super.noSuchMethod(
        Invocation.getter(#getMovieDetail),
        returnValue: _FakeGetMovieDetail_0(
          this,
          Invocation.getter(#getMovieDetail),
        ),
      ) as _i2.GetMovieDetail);
  @override
  _i3.GetWatchListStatus get getWatchListStatus => (super.noSuchMethod(
        Invocation.getter(#getWatchListStatus),
        returnValue: _FakeGetWatchListStatus_1(
          this,
          Invocation.getter(#getWatchListStatus),
        ),
      ) as _i3.GetWatchListStatus);
  @override
  _i4.SaveWatchlist get saveWatchlist => (super.noSuchMethod(
        Invocation.getter(#saveWatchlist),
        returnValue: _FakeSaveWatchlist_2(
          this,
          Invocation.getter(#saveWatchlist),
        ),
      ) as _i4.SaveWatchlist);
  @override
  _i5.RemoveWatchlist get removeWatchlist => (super.noSuchMethod(
        Invocation.getter(#removeWatchlist),
        returnValue: _FakeRemoveWatchlist_3(
          this,
          Invocation.getter(#removeWatchlist),
        ),
      ) as _i5.RemoveWatchlist);
  @override
  _i6.MovieDetailState get state => (super.noSuchMethod(
        Invocation.getter(#state),
        returnValue: _FakeMovieDetailState_4(
          this,
          Invocation.getter(#state),
        ),
      ) as _i6.MovieDetailState);
  @override
  _i9.Stream<_i6.MovieDetailState> get stream => (super.noSuchMethod(
        Invocation.getter(#stream),
        returnValue: _i9.Stream<_i6.MovieDetailState>.empty(),
      ) as _i9.Stream<_i6.MovieDetailState>);
  @override
  bool get isClosed => (super.noSuchMethod(
        Invocation.getter(#isClosed),
        returnValue: false,
      ) as bool);
  @override
  void add(_i6.MovieDetailEvent? event) => super.noSuchMethod(
        Invocation.method(
          #add,
          [event],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void onEvent(_i6.MovieDetailEvent? event) => super.noSuchMethod(
        Invocation.method(
          #onEvent,
          [event],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void emit(_i6.MovieDetailState? state) => super.noSuchMethod(
        Invocation.method(
          #emit,
          [state],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void on<E extends _i6.MovieDetailEvent>(
    _i10.EventHandler<E, _i6.MovieDetailState>? handler, {
    _i10.EventTransformer<E>? transformer,
  }) =>
      super.noSuchMethod(
        Invocation.method(
          #on,
          [handler],
          {#transformer: transformer},
        ),
        returnValueForMissingStub: null,
      );
  @override
  void onTransition(
          _i10.Transition<_i6.MovieDetailEvent, _i6.MovieDetailState>?
              transition) =>
      super.noSuchMethod(
        Invocation.method(
          #onTransition,
          [transition],
        ),
        returnValueForMissingStub: null,
      );
  @override
  _i9.Future<void> close() => (super.noSuchMethod(
        Invocation.method(
          #close,
          [],
        ),
        returnValue: _i9.Future<void>.value(),
        returnValueForMissingStub: _i9.Future<void>.value(),
      ) as _i9.Future<void>);
  @override
  void onChange(_i10.Change<_i6.MovieDetailState>? change) =>
      super.noSuchMethod(
        Invocation.method(
          #onChange,
          [change],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void addError(
    Object? error, [
    StackTrace? stackTrace,
  ]) =>
      super.noSuchMethod(
        Invocation.method(
          #addError,
          [
            error,
            stackTrace,
          ],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void onError(
    Object? error,
    StackTrace? stackTrace,
  ) =>
      super.noSuchMethod(
        Invocation.method(
          #onError,
          [
            error,
            stackTrace,
          ],
        ),
        returnValueForMissingStub: null,
      );
}

/// A class which mocks [MovieRecommendationsCubit].
///
/// See the documentation for Mockito's code generation for more information.
class MockMovieRecommendationsCubit extends _i1.Mock
    implements _i8.MovieRecommendationsCubit {
  MockMovieRecommendationsCubit() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i7.GetMovieRecommendations get getMovieRecommendations =>
      (super.noSuchMethod(
        Invocation.getter(#getMovieRecommendations),
        returnValue: _FakeGetMovieRecommendations_5(
          this,
          Invocation.getter(#getMovieRecommendations),
        ),
      ) as _i7.GetMovieRecommendations);
  @override
  _i8.MovieRecommendationsState get state => (super.noSuchMethod(
        Invocation.getter(#state),
        returnValue: _FakeMovieRecommendationsState_6(
          this,
          Invocation.getter(#state),
        ),
      ) as _i8.MovieRecommendationsState);
  @override
  _i9.Stream<_i8.MovieRecommendationsState> get stream => (super.noSuchMethod(
        Invocation.getter(#stream),
        returnValue: _i9.Stream<_i8.MovieRecommendationsState>.empty(),
      ) as _i9.Stream<_i8.MovieRecommendationsState>);
  @override
  bool get isClosed => (super.noSuchMethod(
        Invocation.getter(#isClosed),
        returnValue: false,
      ) as bool);
  @override
  _i9.Future<void> fetchMovieRecommendations(int? id) => (super.noSuchMethod(
        Invocation.method(
          #fetchMovieRecommendations,
          [id],
        ),
        returnValue: _i9.Future<void>.value(),
        returnValueForMissingStub: _i9.Future<void>.value(),
      ) as _i9.Future<void>);
  @override
  void emit(_i8.MovieRecommendationsState? state) => super.noSuchMethod(
        Invocation.method(
          #emit,
          [state],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void onChange(_i10.Change<_i8.MovieRecommendationsState>? change) =>
      super.noSuchMethod(
        Invocation.method(
          #onChange,
          [change],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void addError(
    Object? error, [
    StackTrace? stackTrace,
  ]) =>
      super.noSuchMethod(
        Invocation.method(
          #addError,
          [
            error,
            stackTrace,
          ],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void onError(
    Object? error,
    StackTrace? stackTrace,
  ) =>
      super.noSuchMethod(
        Invocation.method(
          #onError,
          [
            error,
            stackTrace,
          ],
        ),
        returnValueForMissingStub: null,
      );
  @override
  _i9.Future<void> close() => (super.noSuchMethod(
        Invocation.method(
          #close,
          [],
        ),
        returnValue: _i9.Future<void>.value(),
        returnValueForMissingStub: _i9.Future<void>.value(),
      ) as _i9.Future<void>);
}
