// Mocks generated by Mockito 5.3.2 from annotations
// in ditonton/test/feature/tv_series_detail/page/tv_series_detail_page_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i9;

import 'package:ditonton/core/tv_series/domain/entities/tv_series_detail.dart'
    as _i10;
import 'package:ditonton/core/tv_series/domain/usecase/get_detail_tv_series.dart'
    as _i2;
import 'package:ditonton/core/tv_series/domain/usecase/get_tv_series_recommendations.dart'
    as _i7;
import 'package:ditonton/core/tv_series/domain/usecase/get_watchlist_status.dart'
    as _i3;
import 'package:ditonton/core/tv_series/domain/usecase/remove_watchlist_tv_series.dart'
    as _i5;
import 'package:ditonton/core/tv_series/domain/usecase/save_watchlist_tv_series.dart'
    as _i4;
import 'package:ditonton/feature/tv_series_detail/cubit/tv_series_detail_cubit.dart'
    as _i6;
import 'package:ditonton/feature/tv_series_detail/cubit/tv_series_recommendations_cubit.dart'
    as _i8;
import 'package:flutter_bloc/flutter_bloc.dart' as _i11;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeGetDetailTvSeries_0 extends _i1.SmartFake
    implements _i2.GetDetailTvSeries {
  _FakeGetDetailTvSeries_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeGetWatchlistStatus_1 extends _i1.SmartFake
    implements _i3.GetWatchlistStatus {
  _FakeGetWatchlistStatus_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeSaveWatchlistTvSeries_2 extends _i1.SmartFake
    implements _i4.SaveWatchlistTvSeries {
  _FakeSaveWatchlistTvSeries_2(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeRemoveWatchlistTvSeries_3 extends _i1.SmartFake
    implements _i5.RemoveWatchlistTvSeries {
  _FakeRemoveWatchlistTvSeries_3(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeTvSeriesDetailState_4 extends _i1.SmartFake
    implements _i6.TvSeriesDetailState {
  _FakeTvSeriesDetailState_4(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeGetTvSeriesRecommendations_5 extends _i1.SmartFake
    implements _i7.GetTvSeriesRecommendations {
  _FakeGetTvSeriesRecommendations_5(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeTvSeriesRecommendationsState_6 extends _i1.SmartFake
    implements _i8.TvSeriesRecommendationsState {
  _FakeTvSeriesRecommendationsState_6(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [TvSeriesDetailCubit].
///
/// See the documentation for Mockito's code generation for more information.
class MockTvSeriesDetailCubit extends _i1.Mock
    implements _i6.TvSeriesDetailCubit {
  MockTvSeriesDetailCubit() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.GetDetailTvSeries get getDetailTvSeries => (super.noSuchMethod(
        Invocation.getter(#getDetailTvSeries),
        returnValue: _FakeGetDetailTvSeries_0(
          this,
          Invocation.getter(#getDetailTvSeries),
        ),
      ) as _i2.GetDetailTvSeries);
  @override
  _i3.GetWatchlistStatus get getWatchlistStatus => (super.noSuchMethod(
        Invocation.getter(#getWatchlistStatus),
        returnValue: _FakeGetWatchlistStatus_1(
          this,
          Invocation.getter(#getWatchlistStatus),
        ),
      ) as _i3.GetWatchlistStatus);
  @override
  _i4.SaveWatchlistTvSeries get saveWatchlistTvSeries => (super.noSuchMethod(
        Invocation.getter(#saveWatchlistTvSeries),
        returnValue: _FakeSaveWatchlistTvSeries_2(
          this,
          Invocation.getter(#saveWatchlistTvSeries),
        ),
      ) as _i4.SaveWatchlistTvSeries);
  @override
  _i5.RemoveWatchlistTvSeries get removeWatchlistTvSeries =>
      (super.noSuchMethod(
        Invocation.getter(#removeWatchlistTvSeries),
        returnValue: _FakeRemoveWatchlistTvSeries_3(
          this,
          Invocation.getter(#removeWatchlistTvSeries),
        ),
      ) as _i5.RemoveWatchlistTvSeries);
  @override
  _i6.TvSeriesDetailState get state => (super.noSuchMethod(
        Invocation.getter(#state),
        returnValue: _FakeTvSeriesDetailState_4(
          this,
          Invocation.getter(#state),
        ),
      ) as _i6.TvSeriesDetailState);
  @override
  _i9.Stream<_i6.TvSeriesDetailState> get stream => (super.noSuchMethod(
        Invocation.getter(#stream),
        returnValue: _i9.Stream<_i6.TvSeriesDetailState>.empty(),
      ) as _i9.Stream<_i6.TvSeriesDetailState>);
  @override
  bool get isClosed => (super.noSuchMethod(
        Invocation.getter(#isClosed),
        returnValue: false,
      ) as bool);
  @override
  _i9.Future<void> fetchTvSeriesDetail(int? id) => (super.noSuchMethod(
        Invocation.method(
          #fetchTvSeriesDetail,
          [id],
        ),
        returnValue: _i9.Future<void>.value(),
        returnValueForMissingStub: _i9.Future<void>.value(),
      ) as _i9.Future<void>);
  @override
  _i9.Future<void> loadWatchlistStatus(int? id) => (super.noSuchMethod(
        Invocation.method(
          #loadWatchlistStatus,
          [id],
        ),
        returnValue: _i9.Future<void>.value(),
        returnValueForMissingStub: _i9.Future<void>.value(),
      ) as _i9.Future<void>);
  @override
  _i9.Future<void> addedToWatchlist(_i10.TvSeriesDetail? tvSeries) =>
      (super.noSuchMethod(
        Invocation.method(
          #addedToWatchlist,
          [tvSeries],
        ),
        returnValue: _i9.Future<void>.value(),
        returnValueForMissingStub: _i9.Future<void>.value(),
      ) as _i9.Future<void>);
  @override
  _i9.Future<void> removeFromWatchlist(_i10.TvSeriesDetail? tvSeries) =>
      (super.noSuchMethod(
        Invocation.method(
          #removeFromWatchlist,
          [tvSeries],
        ),
        returnValue: _i9.Future<void>.value(),
        returnValueForMissingStub: _i9.Future<void>.value(),
      ) as _i9.Future<void>);
  @override
  void emit(_i6.TvSeriesDetailState? state) => super.noSuchMethod(
        Invocation.method(
          #emit,
          [state],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void onChange(_i11.Change<_i6.TvSeriesDetailState>? change) =>
      super.noSuchMethod(
        Invocation.method(
          #onChange,
          [change],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void addError(
    Object? error, [
    StackTrace? stackTrace,
  ]) =>
      super.noSuchMethod(
        Invocation.method(
          #addError,
          [
            error,
            stackTrace,
          ],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void onError(
    Object? error,
    StackTrace? stackTrace,
  ) =>
      super.noSuchMethod(
        Invocation.method(
          #onError,
          [
            error,
            stackTrace,
          ],
        ),
        returnValueForMissingStub: null,
      );
  @override
  _i9.Future<void> close() => (super.noSuchMethod(
        Invocation.method(
          #close,
          [],
        ),
        returnValue: _i9.Future<void>.value(),
        returnValueForMissingStub: _i9.Future<void>.value(),
      ) as _i9.Future<void>);
}

/// A class which mocks [TvSeriesRecommendationsCubit].
///
/// See the documentation for Mockito's code generation for more information.
class MockTvSeriesRecommendationsCubit extends _i1.Mock
    implements _i8.TvSeriesRecommendationsCubit {
  MockTvSeriesRecommendationsCubit() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i7.GetTvSeriesRecommendations get getTvSeriesRecommendations =>
      (super.noSuchMethod(
        Invocation.getter(#getTvSeriesRecommendations),
        returnValue: _FakeGetTvSeriesRecommendations_5(
          this,
          Invocation.getter(#getTvSeriesRecommendations),
        ),
      ) as _i7.GetTvSeriesRecommendations);
  @override
  _i8.TvSeriesRecommendationsState get state => (super.noSuchMethod(
        Invocation.getter(#state),
        returnValue: _FakeTvSeriesRecommendationsState_6(
          this,
          Invocation.getter(#state),
        ),
      ) as _i8.TvSeriesRecommendationsState);
  @override
  _i9.Stream<_i8.TvSeriesRecommendationsState> get stream =>
      (super.noSuchMethod(
        Invocation.getter(#stream),
        returnValue: _i9.Stream<_i8.TvSeriesRecommendationsState>.empty(),
      ) as _i9.Stream<_i8.TvSeriesRecommendationsState>);
  @override
  bool get isClosed => (super.noSuchMethod(
        Invocation.getter(#isClosed),
        returnValue: false,
      ) as bool);
  @override
  _i9.Future<void> fetchRecommendationsTvSeries(int? id) => (super.noSuchMethod(
        Invocation.method(
          #fetchRecommendationsTvSeries,
          [id],
        ),
        returnValue: _i9.Future<void>.value(),
        returnValueForMissingStub: _i9.Future<void>.value(),
      ) as _i9.Future<void>);
  @override
  void emit(_i8.TvSeriesRecommendationsState? state) => super.noSuchMethod(
        Invocation.method(
          #emit,
          [state],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void onChange(_i11.Change<_i8.TvSeriesRecommendationsState>? change) =>
      super.noSuchMethod(
        Invocation.method(
          #onChange,
          [change],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void addError(
    Object? error, [
    StackTrace? stackTrace,
  ]) =>
      super.noSuchMethod(
        Invocation.method(
          #addError,
          [
            error,
            stackTrace,
          ],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void onError(
    Object? error,
    StackTrace? stackTrace,
  ) =>
      super.noSuchMethod(
        Invocation.method(
          #onError,
          [
            error,
            stackTrace,
          ],
        ),
        returnValueForMissingStub: null,
      );
  @override
  _i9.Future<void> close() => (super.noSuchMethod(
        Invocation.method(
          #close,
          [],
        ),
        returnValue: _i9.Future<void>.value(),
        returnValueForMissingStub: _i9.Future<void>.value(),
      ) as _i9.Future<void>);
}
